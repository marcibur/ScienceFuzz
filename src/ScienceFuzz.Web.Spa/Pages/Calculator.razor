@page "/Calculator"
@using ScienceFuzz.Models
@using System.Text.Json
@inject HttpClient http
@inject IJSRuntime JSRuntime;

<main class="naukowiec-choose-main">
    <section class="calculator-spa-section">
        <div class="row">
            <div class="col"></div>
            <div class="col col-12 col-md-6">
                <form>
                    <h4 class="scientist-choose-heading">Wybierz naukowca</h4>
                    <div class="form-group">
                        @if (scientistNames == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <select class="form-control" @onchange="OnScientistSelected">
                                @foreach (var scientistName in scientistNames)
                                {
                                    <option value=@scientistName>@scientistName</option>
                                }

                            </select>
                        }
                    </div>
                </form>
            </div>
            <div class="col"></div>
        </div>
    </section>
    <section class="calculator-spa-section">
        <div class="shadow-lg journals-div">
            <div class="table-responsive">
                <table class="table table-striped table-hover table-sm">
                    <thead>
                        <tr>
                            <th>Czasopismo</th>
                            <th>Ilość publikacji</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (scientist == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            @foreach (var publication in scientist.Publications)
                            {
                                <tr>
                                    <td>@publication.Journal</td>
                                    <td>@publication.Count</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </section>
    <section class="calculator-spa-section">
        <div class="row">
            <div class="col-12 col-lg-12 diagram-col">
                <div><canvas id="chart-disciplines-bars"></canvas></div>
            </div>
            <div class="col-12 col-lg-12 diagram-col">
                <div><canvas id="chart-domains-radar"></canvas></div>
            </div>
        </div>
    </section>
</main>

@code
{
    private Scientist scientist;
    private string[] scientistNames;

    protected override async Task OnInitializedAsync()
    {
        scientistNames = await http.GetJsonAsync<string[]>("http://localhost:7071/api/scientists");
        await SetScientistAsync(scientistNames[0]);
    }

    private async Task OnScientistSelected(ChangeEventArgs e)
    {
        await SetScientistAsync(e.Value.ToString());
    }



    private async Task SetScientistAsync(string scientistName)
    {
        scientist = await http.GetJsonAsync<Scientist>($"http://localhost:7071/api/scientists/{scientistName}");

        var barChartViewModel = new ChartViewModel
        {
            Labels = scientist.DisciplineContributions.Select(x => x.Name).ToArray(),
            Datasets = new DataSet[]
            {
                new DataSet
                {
                    Data = scientist.DisciplineContributions.Select(x => x.Value).ToArray()
                }
                }
        };

        await JSRuntime.InvokeVoidAsync("setDisciplinesChart", barChartViewModel);

        var radarChartViewModel = new ChartViewModel
        {
            Labels = scientist.DomainContributions.Select(x => x.Name).ToArray(),
            Datasets = new DataSet[]
           {
                new DataSet
                {
                    Data = scientist.DomainContributions.Select(x => x.Value).ToArray()
                }
                }
        };

        await JSRuntime.InvokeVoidAsync("setDomainsChart", radarChartViewModel);
    }



    public class ChartViewModel
    {
        public string[] Labels { get; set; }
        public DataSet[] Datasets { get; set; }
    }

    public class DataSet
    {
        public double[] Data { get; set; }
    }
}